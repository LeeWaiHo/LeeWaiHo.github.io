<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>story on Winho Lee</title>
    <link>http://liweihao.me/tags/story/</link>
    <description>Recent content in story on Winho Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 10 Oct 2019 17:01:41 +0800</lastBuildDate>
    
	<atom:link href="http://liweihao.me/tags/story/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Viper on Etcd</title>
      <link>http://liweihao.me/posts/viper-on-etcd/</link>
      <pubDate>Thu, 10 Oct 2019 17:01:41 +0800</pubDate>
      
      <guid>http://liweihao.me/posts/viper-on-etcd/</guid>
      <description>背景 希望在Go项目中使用Viper来读取Etcd中的配置文件并监听其变化
实现代码 package config import ( &amp;quot;github.com/spf13/viper&amp;quot; _ &amp;quot;github.com/spf13/viper/remote&amp;quot; ) const ( ProviderType = &amp;quot;etcd&amp;quot; ProviderEndpoint = &amp;quot;http://192.168.1.63:2379&amp;quot; Path = &amp;quot;/config.json&amp;quot; ) func Setup() *viper.Viper { c := viper.New() c.SetConfigType(&amp;quot;json&amp;quot;) if e := c.AddRemoteProvider(ProviderType, ProviderEndpoint, Path); e != nil { panic(e) } if e := c.ReadRemoteConfig(); e != nil { panic(e) } if e := c.WatchRemoteConfigOnChannel(); e != nil { panic(e) } return c }  Viper是如何实现监听其变化的? 通过查看源码发现 在代码$GOPATH/go/src/github.</description>
    </item>
    
  </channel>
</rss>